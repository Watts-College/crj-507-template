knitr::opts_chunk$set( echo = TRUE )
icent
icent
# load the libraries we need
library( sna )
library( network )
# define the path location for the file
loc <- "https://github.com/jacobtnyoung/sna-textbook/raw/main/data/data-paul-revere-net.rds"
PaulRevereNet <- readRDS( url( loc ) )
# look at the network
PaulRevereNet
PaulRevereMat <- as.sociomatrix( PaulRevereNet )
PaulRevereMatP <- PaulRevereMat %*% t( PaulRevereMat )
PaulRevereMatP
dim(PaulRevereMatP)
# clear the workspace
rm( list = ls() )
# load the libraries you will need
library( network )
library( sna )
# Load the networks
# set the url
loc <- "https://github.com/jacobtnyoung/sna-textbook/raw/main/data/data-PHX-arrest-2023-net.rds"
# for the 2023
PhxArrestNet2023 <- readRDS( url( loc ) )
# set the url
loc <- "https://github.com/jacobtnyoung/sna-textbook/raw/main/data/data-PHX-arrest-2022-net.rds"
# for the 2022
PhxArrestNet2022 <- readRDS( url( loc ) )
# This builds all the objects I want to use in the report.
# They are built here, but the code does not show in the report.
# ----
# calculate the density of the network
PhxArrestNet2023Mat <- as.matrix( PhxArrestNet2023 ) # create a matrix from the network object
L <- sum( PhxArrestNet2023Mat )                      # identify the number of edges in the graph
N <- dim( PhxArrestNet2023Mat )[1]                   # identify the number of actors in the example
M <- dim( PhxArrestNet2023Mat )[2]                   # identify the number of events in the example
density.PhxArrestNet2023Mat <- L / ( N * M )         # calculate the density
# ----
# calculate the degree centrality scores for each set of nodes
actor.deg <- rowSums( PhxArrestNet2023Mat ) # raw scores for actors
event.deg <- colSums( PhxArrestNet2023Mat ) # raw scores for events
# calculate the mean degree centrality scores
mean.actor.deg <- L / N # mean degree for actors
mean.event.deg <- L / M # mean degree for events
# ----
# calculate the standardized degree centrality scores for each set of nodes
# we need these for the comparisons in part III
s.actor.deg <- actor.deg / M # standardized score for actors
s.event.deg <- event.deg / N # standardized score for events
density.PhxArrestNet2023Mat
round( density.PhxArrestNet2023Mat, 3 ) * 100
round( density.PhxArrestNet2023Mat, 3 ) * 100 - 1
